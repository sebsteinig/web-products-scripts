name: Deploy Release

on:
  workflow_dispatch:
    inputs:
      version_tag:
        description: 'Version tag to deploy (e.g., v1.0.0)'
        required: true
        type: string
      environment:
        description: 'Target environment'
        required: true
        type: choice
        options:
          - dev
          - prod

permissions:
  contents: write  # Needed for creating deployment tags and updating history

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed for tag history
    
    - name: Verify release exists
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Check if release exists
        if ! gh release view ${{ github.event.inputs.version_tag }}; then
          echo "Release ${{ github.event.inputs.version_tag }} not found"
          exit 1
        fi
    
    - name: Download release assets
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Create directory for release files
        mkdir -p release-files
        cd release-files
        
        # Download all release assets
        gh release download ${{ github.event.inputs.version_tag }}
        
        # Verify we have the expected files
        if [ ! -f "version.txt" ] || [ ! -f "generated_at.txt" ]; then
          echo "Required metadata files not found in release"
          exit 1
        fi
        
        # Verify we have JSON files
        if [ $(find . -name "*.json" | wc -l) -eq 0 ]; then
          echo "No JSON files found in release"
          exit 1
        fi
    
    - name: Verify version
      run: |
        cd release-files
        if [ ! -f "version.txt" ]; then
          echo "Version file not found"
          exit 1
        fi
        if [ "$(cat version.txt)" != "${{ github.event.inputs.version_tag }}" ]; then
          echo "Version mismatch: $(cat version.txt) != ${{ github.event.inputs.version_tag }}"
          exit 1
        fi
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pymongo python-dotenv
        
    # - name: Deploy to MongoDB
      env:
        MONGODB_URI: ${{ secrets.MONGODB_URI }}
        MONGODB_DATABASE: ${{ secrets.MONGODB_DATABASE }}
      run: |
        python - <<EOF
        import os
        import json
        from datetime import datetime
        from pymongo import MongoClient
        
        # Connect to MongoDB
        # client = MongoClient(os.environ['MONGODB_URI'])
        # db = client[os.environ['MONGODB_DATABASE']]
    
        #     # Update or insert JSON files
        for filename in os.listdir('release-files'):
            if filename.endswith('.json'):
                print(f"Processing {filename}")

        
    - name: Update deployment history
      run: |
        # Configure git
        git config --global user.name "GitHub Actions Bot"
        git config --global user.email "actions@github.com"
        
        # Create or update deployment history file
        HISTORY_FILE="deployment_history.json"
        if [ ! -f "$HISTORY_FILE" ]; then
          echo "[]" > "$HISTORY_FILE"
        fi
        
        # Add new deployment to history
        python - <<EOF
        import json
        import sys
        from datetime import datetime
        
        # Read existing history
        with open('deployment_history.json', 'r') as f:
            history = json.load(f)
        
        # Create new deployment entry
        deployment = {
            'version': '${{ github.event.inputs.version_tag }}',
            'environment': '${{ github.event.inputs.environment }}',
            'deployed_at': datetime.utcnow().isoformat(),
            'deployed_by': '${{ github.actor }}',
            'commit': '${{ github.sha }}'
        }
        
        # Add to history (at the beginning)
        history.insert(0, deployment)
        
        # Write updated history
        with open('deployment_history.json', 'w') as f:
            json.dump(history, f, indent=2)
        EOF
        
        # Commit and push changes
        git add deployment_history.json
        git commit -m "Update deployment history: ${{ github.event.inputs.version_tag }} to ${{ github.event.inputs.environment }}"
        git push
        
    - name: Create deployment tag

      run: |
        # Get release commit SHA
        RELEASE_SHA=$(gh release view ${{ github.event.inputs.version_tag }} --json targetCommitish --jq .targetCommitish)
        
        # Create deployment tag with metadata
        DEPLOY_TAG="deploy/${{ github.event.inputs.environment }}/${{ github.event.inputs.version_tag }}/$(date +%Y%m%d-%H%M%S)"
        git tag -a "$DEPLOY_TAG" -m "Deployed ${{ github.event.inputs.version_tag }} to ${{ github.event.inputs.environment }}
        
        Release: ${{ github.event.inputs.version_tag }}
        Environment: ${{ github.event.inputs.environment }}
        Deployed by: ${{ github.actor }}
        Deployed at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
        Release commit: ${RELEASE_SHA}
        Deploy commit: ${{ github.sha }}"
        
        # Push the tag
        git push origin "$DEPLOY_TAG" 