# This workflow monitors external configuration files for changes and manages the update process.
# 
# Purpose:
# - Runs daily to check for changes in external config files (variable and style configs)
# - Downloads configs from Bitbucket and GitHub repositories
# - Compares new configs with previously stored versions
# - Creates issues when changes are detected
# - Maintains an artifact history of config files
# 
# Triggers:
# - Scheduled: Runs daily at midnight UTC
# - Manual: Can be triggered via workflow_dispatch
#
# Outputs:
# - Creates GitHub issues detailing detected changes (to allow for manual updates)
# - Stores latest configs as artifacts (as a new comparison reference)

name: Check External Config Changes

on:
  # schedule:
  #   - cron: '0 0 * * *'  # runs once a day at midnight UTC
  workflow_dispatch:  # allow manual triggers for testing

permissions:
  issues: write
  actions: write

jobs:
  check:
    runs-on: miha-atos
    
    steps:
    - uses: actions/checkout@v4
    
    # Step to set up Python
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    # Step to install dependencies
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests pyyaml

    # Step to list artifacts
    - name: List artifacts
      env:
        GH_TOKEN: ${{ github.token }}  # Set the GitHub token for authentication
      run: |
        echo "Listing artifacts..."
        gh api repos/${{ github.repository }}/actions/artifacts 
        
    # Step to get the newest config-files artifact
    - name: Get the newest config-files artifact
      id: get_newest_artifact
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Get the latest artifact info
        artifact_info=$(gh api repos/${{ github.repository }}/actions/artifacts \
          --jq '.artifacts | map(select(.name == "config-files")) | sort_by(.created_at) | last')
        
        if [ "$(echo "$artifact_info" | jq -r '.id')" != "null" ]; then
          artifact_id=$(echo "$artifact_info" | jq -r '.id')
          
          # Download the artifact using gh api with proper redirection
          gh api \
            repos/${{ github.repository }}/actions/artifacts/$artifact_id/zip \
            -H "Accept: application/vnd.github+json" > config-files.zip
            
          # Unzip the downloaded file
          unzip -q config-files.zip -d previous-configs || echo "Failed to unzip artifact"
        else
          echo "No previous artifact found"
        fi

    # Step to download the new config files
    - name: Download external config files
      env:
        BITBUCKET_USERNAME: ${{ secrets.BITBUCKET_USERNAME }}
        BITBUCKET_TOKEN: ${{ secrets.BITBUCKET_TOKEN }}
      run: |
      
        # Download the new config files
        curl -u "$BITBUCKET_USERNAME:$BITBUCKET_TOKEN" -o new_var_config.yaml "https://git.ecmwf.int/projects/CDS/repos/cads-forms-cams/raw/cams-europe-air-quality-forecasts/regional_fc_definitions.yaml?at=refs%2Fheads%2Fprod"
        curl -o new_style_config.yaml "https://raw.githubusercontent.com/CopernicusAtmosphere/air-quality-plot-settings/refs/heads/main/plot_settings.yaml"

    # Step to compare the new config files with the previous ones
    - name: Compare config files
      id: compare
      run: |
        # Create a directory for the comparison results
        mkdir -p comparison-results
        
        # Initialize variables for storing differences
        var_diff=""
        style_diff=""
        
        # Compare variable config files
        if [ -f "previous-configs/new_var_config.yaml" ]; then
          previous_configs_exist=true
          echo "Comparing variable config files..."
          if ! diff previous-configs/new_var_config.yaml new_var_config.yaml > comparison-results/var_config_diff.txt; then
            echo "Differences found in variable config:"
            cat comparison-results/var_config_diff.txt
            var_diff=$(cat comparison-results/var_config_diff.txt)
          fi
        else
          echo "No previous variable config file found."
          var_diff="No previous variable config file found."
        fi
        
        # Compare style config files
        if [ -f "previous-configs/new_style_config.yaml" ]; then
          previous_configs_exist=true
          echo "Comparing style config files..."
          if ! diff previous-configs/new_style_config.yaml new_style_config.yaml > comparison-results/style_config_diff.txt; then
            echo "Differences found in style config:"
            cat comparison-results/style_config_diff.txt
            style_diff=$(cat comparison-results/style_config_diff.txt)
          fi
        else
          echo "No previous style config file found."
          style_diff="No previous style config file found."
        fi

        # Save the differences to environment variables for the issue
        echo "var_diff<<EOF" >> $GITHUB_ENV
        echo "$var_diff" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        
        echo "style_diff<<EOF" >> $GITHUB_ENV
        echo "$style_diff" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

        # Check if there are any differences
        if [ -s comparison-results/var_config_diff.txt ] || [ -s comparison-results/style_config_diff.txt ] || [ "$previous_configs_exist" = false ]; then
          echo "Differences found in config file(s)."
          echo "config_changed=true" >> $GITHUB_OUTPUT
        else
          echo "No differences found in config file(s)."
          echo "config_changed=false" >> $GITHUB_OUTPUT
        fi

    # Step to create an issue if changes are detected
    - name: Create Issue
      if: steps.compare.outputs.config_changed == 'true'
      uses: actions/github-script@v6
      with:
        script: |
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'ðŸ”„ External Config Files Changed',
            body: `Changes detected in external configuration files.

            Use the generate-json workflow to automatically update the JSON files.

            ## Variable Config Changes
            \`\`\`diff
            ${{ env.var_diff }}
            \`\`\`

            ## Style Config Changes
            \`\`\`diff
            ${{ env.style_diff }}
            \`\`\`
            `
          });

    # Step to trigger generate-json.yml workflow
    # - name: Trigger generate-json workflow
    #   if: steps.compare.outputs.config_changed == 'true'
    #   env:
    #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   run: |
    #     gh workflow run generate-json.yml
        
    # Step to delete existing artifacts
    - name: Delete existing artifacts
      if: steps.compare.outputs.config_changed == 'true'
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Set the GitHub token for authentication
      run: |
        echo "Deleting existing artifacts..."
        for artifact_id in $(gh api repos/${{ github.repository }}/actions/artifacts --jq '.artifacts[] | select(.name == "config-files") | .id'); do
          echo "Deleting artifact with ID: $artifact_id"
          gh api -X DELETE /repos/${{ github.repository }}/actions/artifacts/$artifact_id
        done

    # Step to upload the new config files as an artifact
    - name: Upload new config files
      if: steps.compare.outputs.config_changed == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: config-files
        path: |
          new_var_config.yaml
          new_style_config.yaml 
