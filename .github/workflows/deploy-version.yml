name: Deploy Version to MongoDB

on:
  workflow_dispatch:
    inputs:
      version_tag:
        description: 'Version tag to deploy (e.g., v1.0.0)'
        required: true
        type: string
      environment:
        description: 'Target environment'
        required: true
        type: choice
        options:
          - development
          - staging
          - production

permissions:
  contents: write  # Needed for creating deployment tags and updating history

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Create directory for release files
        mkdir -p release-files
        cd release-files
        
        # Download and extract release
        gh release download ${{ github.event.inputs.version_tag }} --pattern "*.zip"
        unzip *.zip
        rm *.zip
    
    - name: Verify version
      run: |
        cd release-files
        if [ ! -f "version.txt" ]; then
          echo "Version file not found"
          exit 1
        fi
        if [ "$(cat version.txt)" != "${{ github.event.inputs.version_tag }}" ]; then
          echo "Version mismatch: $(cat version.txt) != ${{ github.event.inputs.version_tag }}"
          exit 1
        fi
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pymongo python-dotenv
        
    - name: Deploy to MongoDB
      env:
        MONGODB_URI: ${{ secrets.MONGODB_URI }}
        MONGODB_DATABASE: ${{ secrets.MONGODB_DATABASE }}
      run: |
        python - <<EOF
        import os
        import json
        from datetime import datetime
        from pymongo import MongoClient
        
        # Connect to MongoDB
        client = MongoClient(os.environ['MONGODB_URI'])
        db = client[os.environ['MONGODB_DATABASE']]
        
        # Get deployment info
        version_tag = '${{ github.event.inputs.version_tag }}'
        environment = '${{ github.event.inputs.environment }}'
        
        # Read version metadata
        with open('release-files/version.txt', 'r') as f:
            stored_version = f.read().strip()
        with open('release-files/generated_at.txt', 'r') as f:
            generated_at = f.read().strip()
            
        # Verify version matches
        if stored_version != version_tag:
            raise ValueError(f"Version mismatch: {stored_version} != {version_tag}")
        
        # Create deployment record
        deployment_info = {
            'version': version_tag,
            'environment': environment,
            'generated_at': generated_at,
            'deployed_at': datetime.utcnow().isoformat(),
            'deployed_by': '${{ github.actor }}'
        }
        
        # Store deployment record
        db.deployments.insert_one(deployment_info)
        
        # Update or insert JSON files
        for filename in os.listdir('release-files'):
            if filename.endswith('.json'):
                with open(f'release-files/{filename}', 'r') as f:
                    data = json.load(f)
                    
                # Store in versioned collection
                versioned_collection = f"{filename.replace('.json', '')}_{version_tag.replace('.', '_')}"
                db[versioned_collection].insert_many(data if isinstance(data, list) else [data])
                
                # Update current collection
                if environment == 'production':
                    current_collection = filename.replace('.json', '')
                    db[current_collection].delete_many({})
                    db[current_collection].insert_many(data if isinstance(data, list) else [data])
        
        print(f"Successfully deployed version {version_tag} to {environment}")
        print(f"Generated at: {generated_at}")
        print(f"Deployed at: {deployment_info['deployed_at']}")
        
        # Save deployment info for history
        print("::set-output name=deployment_info::" + json.dumps(deployment_info))
        EOF
        
    - name: Update deployment history
      run: |
        # Configure git
        git config --global user.name "GitHub Actions Bot"
        git config --global user.email "actions@github.com"
        
        # Create or update deployment history file
        HISTORY_FILE="deployment_history.json"
        if [ ! -f "$HISTORY_FILE" ]; then
          echo "[]" > "$HISTORY_FILE"
        fi
        
        # Add new deployment to history
        python - <<EOF
        import json
        import sys
        from datetime import datetime
        
        # Read existing history
        with open('deployment_history.json', 'r') as f:
            history = json.load(f)
        
        # Create new deployment entry
        deployment = {
            'version': '${{ github.event.inputs.version_tag }}',
            'environment': '${{ github.event.inputs.environment }}',
            'deployed_at': datetime.utcnow().isoformat(),
            'deployed_by': '${{ github.actor }}',
            'commit': '${{ github.sha }}'
        }
        
        # Add to history (at the beginning)
        history.insert(0, deployment)
        
        # Write updated history
        with open('deployment_history.json', 'w') as f:
            json.dump(history, f, indent=2)
        EOF
        
        # Commit and push changes
        git add deployment_history.json
        git commit -m "Update deployment history: ${{ github.event.inputs.version_tag }} to ${{ github.event.inputs.environment }}"
        git push
        
    - name: Create deployment tag
      if: github.event.inputs.environment == 'production'
      run: |
        git tag "deployed-${{ github.event.inputs.version_tag }}-$(date +%Y%m%d%H%M%S)"
        git push origin "deployed-${{ github.event.inputs.version_tag }}-$(date +%Y%m%d%H%M%S)" 